# -*- coding: utf-8 -*-
"""feynn-project-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JM8QsVOw5QZo6KRSWOq-cujaV4bpfm97
"""

import pandas as pd

df=pd.read_csv('zomato.csv',encoding='latin-1')
df.head(10)

df.info()

df.drop(columns=['Restaurant ID','Restaurant Name','Is delivering now','Switch to order menu','Price range','Rating color'],axis=1,inplace=True)
df.drop(columns=['Address','Locality','Locality Verbose'],axis=1,inplace=True)

df[df['Country Code']==1]
df=df[df['City'].isin(['New Delhi','Gurgaon','Noida','Faridabad'])]
# Drop country code 
df.drop(columns=['Country Code','Currency'],axis=1,inplace=True)

from sklearn.preprocessing import LabelEncoder
encoder= LabelEncoder()
df['City']=encoder.fit_transform(df['City'])
df['Has Table booking']=encoder.fit_transform(df['Has Table booking'])
df['Has Online delivery']=encoder.fit_transform(df['Has Online delivery'])
df['Rating text']=encoder.fit_transform(df['Rating text'])
#to solve multi encoding problem so 3 is not given more weightage than..say 1 or delhi
#so just change them to columns from rows
# one hot encoding is what this is called
# then reomve multi-collinearity using get dummies

df.head()

cuisine=df.groupby('Cuisines').mean()['Average Cost for two'].reset_index()
df=df.merge(cuisine,on='Cuisines')
#mean value of cuisines we got so dropping original cuisines
df.drop(columns=['Cuisines'],axis=1,inplace=True)
df.rename(columns={'Average Cost for two_y':'Cuisines'},inplace=True)

df.corr()
df.corr()['Average Cost for two_x']

X=df.drop(columns=['Average Cost for two_x']).values
Y=df['Average Cost for two_x'].values
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=0)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
reg=LinearRegression()
reg.fit(X_train,Y_train)

Y_pred=reg.predict(X_test)
## Evaluations

from sklearn.metrics import r2_score
r2_score(Y_test,Y_pred)

Y_pred[2]

Y_test[2]

from sklearn.metrics import r2_score
r2_score(Y_test,Y_pred)